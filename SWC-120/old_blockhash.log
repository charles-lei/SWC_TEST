==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: MAIN
Function name: settle()
PC address: 216
Estimated Gas Usage: 7635 - 62676
A control flow decision is made based on a predictable variable.
The block.number environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0xde0b6b3a7640000
Caller: [CREATOR], function: settle(), txdata: 0x11da60b4, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Medium
Contract: MAIN
Function name: settle()
PC address: 442
Estimated Gas Usage: 7635 - 62676
A control flow decision is made based on a predictable variable.
The block hash of a previous block is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0xde0b6b3a7640000
Caller: [CREATOR], function: settle(), txdata: 0x11da60b4, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: MAIN
Function name: settle()
PC address: 498
Estimated Gas Usage: 6887 - 27928
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0xde0b6b3a7640000
Caller: [ATTACKER], function: settle(), txdata: 0x11da60b4, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: MAIN
Function name: _function_0xed7f559c
PC address: 705
Estimated Gas Usage: 10982 - 51647
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT CREATION], value: 0xde0b6b3a7640000
Caller: [CREATOR], function: unknown, txdata: 0xed7f559c, value: 0xde0b6b3a7640000


